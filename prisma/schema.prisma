generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  description String
  thumbnail   String
  products    Product[]

  createdAt DateTime @default(now())
}

model Order {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  paymentStatus PaymentStatus
  OrderItem     OrderItem[]
}

model OrderItem {
  quantity  Int
  orderId   Int
  userId    Int
  unitPrice Int
  Order     Order @relation(fields: [orderId], references: [id])
  User      User  @relation(fields: [userId], references: [id])

  @@id([userId, orderId])
  @@index([userId, orderId])
}

model Inventory {
  id        Int       @id @default(autoincrement())
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  description String
  price       Int
  SKU         String
  gallery     String[]
  hoverImage  String?
  thumbnail   String?
  inventory   Inventory?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  collections Collection[]
  CartItem    CartItem[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  User   User   @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  FAILED
  COMPLETED
}

enum Role {
  USER
  ADMIN
}

model Cart {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [id])
  userId Int        @unique
  items  CartItem[]
}

model CartItem {
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  cartId    Int
  productId Int
  quantity  Int

  @@id([cartId, productId])
  @@index([cartId, productId])
}

model Address {
  id         Int    @id @default(autoincrement())
  street     String
  city       String
  state      String
  country    String
  postalCode String
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  role      Role        @default(USER)
  name      String
  order     Order[]
  cart      Cart?
  orderItem OrderItem[]
  profile   Profile?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  OAuthToken OAuthToken[]
}

model OAuthProvider {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  clientId     String
  clientSecret String
  authUrl      String
  tokenUrl     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  OAuthToken   OAuthToken[]
}

model OAuthToken {
  id           Int           @id @default(autoincrement())
  accessToken  String
  refreshToken String
  expiresIn    Int
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  provider     OAuthProvider @relation(fields: [providerId], references: [id])
  providerId   Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
